Coding Standards
================

Please try and stick to the GNU coding standards.  A lot of hard work
went into making Check compatible with the standards, and would be
nice if that work didn't erode.  I decided on the standards because
they work well for a lot of programs much bigger than Check.  Ok,
since you're wondering, the advantages of sticking to the standards
are three-fold:

  1) consistent style within the project

  2) being familiar with the standards lets you work on lots of
     different GNU standards-compliant projects pretty easily

  3) it reduces the number of decisions that must be made

So far, the only intentional deviation from the standards is the use
of `svn log -v > SVNChangeLog' to generate an SVNChangeLog, rather
than manual editing.  Subversion solves many of the problems in CVS,
for which the GNU ChangeLog rules are written, the lack of atomic
commits being one of them.  However, this doesn't work for make
distcheck because it never reaches the SVN working copy, so perhaps a
better mechanism is needed.

Release Process
===============

Start by making sure everything is OK.

Start in a configured trunk.

1.  Decide on a X.Y.Z revision suitable for release.
2.  make SF_USERNAME=username RELEASE_VERSION=X.Y.Z preparerelease
    This will tag trunk as https://svn.sourceforge.net/svnroot/check/tags/check-X.Y.Z
3.  Follow the prompts
4.  Use the following template to announce the release:
=====
Subject: check-X.Y.Z released
Hi,

<some sentence about the release, e.g. "This is a bug fix release."> 
Please test it out and report any problems you might have!

http://prdownloads.sourceforge.net/check/check-X.Y.Z.tar.gz?download

Thanks,
`whoami`

<paste contents of NEWS-release here>
=====
5.  Follow the remaining prompts.
